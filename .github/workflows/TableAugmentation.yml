# This is a basic workflow to help you get started with Actions

name: TableAugmentation

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "master" branch
  push:
    branches: 
      - "test"

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "updateTables"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    name: updateTestTables
    environment: test
    steps:  # Steps represent a sequence of tasks that will be executed as part of the job
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v1
        with:
          python-version: 3.9 #install the python version needed
          fetch-depth: 0  # OR "2" -> To retrieve the preceding commit.
          
      - name: Changed Files
        id: changed-files  # id used in next steps -> steps.changed-files.....
        uses: tj-actions/changed-files@v31.0.1
        
      - name: Check for .sql files 
        run: |
          # list of changed sql files identified.
          declare -a LIST_OF_CHANGED_SQL_FILES=()
          
          for file in ${{ steps.changed-files.outputs.all_changed_files }}; do
            # if file came from directory, and ends with .sql;  
          
            
            LIST_OF_CHANGED_SQL_FILES+=(file)
          done;
      
      - name: print out changed sql files
        run: |
          cat LIST_OF_CHANGED_SQL_FILES

          
      - name: install dbsqlcli
        run: |
          python3 -m pip install dbsqlcli
          
      - name: initial setup of dbsqlcli
        run: |
          dbsqlcli
          
      - name: connect to Databricks-sql-cli
        if: always()  # because previous step always turn out an error 
        run: |          
          
          dbsqlcli -e "SELECT * FROM default.diamonds LIMIT 2" --hostname ${{ secrets.DBSQLCLI_HOST_NAME }} --http-path ${{ secrets.DBSQLCLI_HTTP_PATH }} --access-token ${{ secrets.DBSQLCLI_ACCESS_TOKEN }}
          
          
          
          # todo: check if tables exists within the cluster. -> perform short simple query. 
          # todo: check if commit file name starts with "create", ends with ".sql"
          
      - name: print log file
        if: always()
        run: cat ~/.dbsqlcli/app.log
