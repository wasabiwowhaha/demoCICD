# This is a basic workflow to help you get started with Actions

name: TableAugmentation

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "master" branch
  push:
    branches: 
      - "test"

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "updateTables"
  updateTables:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v1
        with:
          python-version: 3.9 #install the python version needed
      
      # Runs a set of commands using the runners shell
      - name: create the dbsqlcli config file
        run: |
          mkdir ~/.dbsqlcli
          cd ~/.dbsqlcli 
          touch dbsqlclirc
          cat > ~/.dbsqlcli/dbsqlclirc <<EOF                                                                                                                took  1m 49s  Catalyst_Databrick at  14:58:49
          
          
          [main]
          # log_file location.
          log_file = ~/.dbsqlcli/app.log

          # history_file location.
          history_file = '~/.dbsqlcli/history'

          # Multi-line mode allows breaking up the sql statements into multiple lines. If
          # this is set to True, then the end of the statements must have a semi-colon.
          # If this is set to False then sql statements can't be split into multiple
          # lines. End of line (return) is considered as the end of the statement.
          multi_line = True

          # Destructive warning mode will alert you before executing a sql statement
          # that may cause harm to the database such as "drop table", "drop database"
          # or "shutdown".
          destructive_warning = True

          # Default log level. Possible values: "CRITICAL", "ERROR", "WARNING", "INFO"
          # and "DEBUG". "NONE" disables logging.
          log_level = INFO

          # Timing of sql statments and table rendering.
          timing = True

          # Table format. Possible values: ascii, double, github,
          # psql, plain, simple, grid, fancy_grid, pipe, orgtbl, rst, mediawiki, html,
          # latex, latex_booktabs, textile, moinmoin, jira, vertical, tsv, csv.
          # Recommended: ascii
          table_format = ascii

          # Syntax coloring style. Possible values (many support the "-dark" suffix):
          # manni, igor, xcode, vim, autumn, vs, rrt, native, perldoc, borland, tango, emacs,
          # friendly, monokai, paraiso, colorful, murphy, bw, pastie, paraiso, trac, default,
          # fruity.
          # Screenshots at http://mycli.net/syntax
          syntax_style = default

          # Keybindings: Possible values: emacs, vi.
          # Emacs mode: Ctrl-A is home, Ctrl-E is end. All emacs keybindings are available in the REPL.
          # When Vi mode is enabled you can use modal editing features offered by Vi in the REPL.
          key_bindings = emacs

          # DBSQL prompt
          # \d - Database name
          # \h - Hostname
          # \D - The full current date
          # \m - Minutes of the current time
          # \n - Newline
          # \P - AM/PM
          # \R - The current time, in 24-hour military time (0‚Äì23)
          # \s - Seconds of the current time
          prompt = '\h:\d> '
          prompt_continuation = '-> '

          # enable pager on startup
          enable_pager = True

          # Custom colors for the completion menu, toolbar, etc.
          [colors]
          completion-menu.completion.current = 'bg:#ffffff #000000'
          completion-menu.completion = 'bg:#008888 #ffffff'
          completion-menu.meta.completion.current = 'bg:#44aaaa #000000'
          completion-menu.meta.completion = 'bg:#448888 #ffffff'
          completion-menu.multi-column-meta = 'bg:#aaffff #000000'
          scrollbar.arrow = 'bg:#003333'
          scrollbar = 'bg:#00aaaa'
          selected = '#ffffff bg:#6666aa'
          search = '#ffffff bg:#4444aa'
          search.current = '#ffffff bg:#44aa44'
          bottom-toolbar = 'bg:#222222 #aaaaaa'
          bottom-toolbar.off = 'bg:#222222 #888888'
          bottom-toolbar.on = 'bg:#222222 #ffffff'
          search-toolbar = 'noinherit bold'
          search-toolbar.text = 'nobold'
          system-toolbar = 'noinherit bold'
          arg-toolbar = 'noinherit bold'
          arg-toolbar.text = 'nobold'
          bottom-toolbar.transaction.valid = 'bg:#222222 #00ff5f bold'
          bottom-toolbar.transaction.failed = 'bg:#222222 #ff005f bold'

          # style classes for colored table output
          output.header = "#00ff5f bold"
          output.odd-row = ""
          output.even-row = ""

          # Favorite queries.
          [favorite_queries]
          
          EOF

      - name: install dbsqlcli
        run: |
          python3 -m pip install dbsqlcli
          
      - name: connect to Databricks-sql-cli
        env:
          DBSQLCLI_ACCESS_TOKEN: ${{ secrets.DBSQLCLI_ACCESS_TOKEN }}
          DBSQLCLI_HOST_NAME: ${{ secrets.DBSQLCLI_HOST_NAME }}
          DBSQLCLI_HTTP_PATH: ${{ secrets.DBSQLCLI_HTTP_PATH }}
        run: |          
          dbsqlcli -e "SELECT * FROM default.diamonds LIMIT 2"

          
          # todo: need to connect to github secrets and pull the credentials. 
          # todo: connect tot the warehouse cluster
          # todo: check if tables exists within the cluster. -> perform short simple query. 
          # todo: check if commit file name starts with "create", ends with ".sql"
          
          echo Add other actions to build,
          echo test, and deploy your project.
          
